#!/usr/bin/env php
<?php
require_once "vendor/autoload.php";

if($argv[1]==="serve")
{
    shell_exec("php -S localhost:8080 -t public");
}

if($argv[1]==="make:entity")
{
    print_r("\n");
    $entityName = readline("Entity Name ? \n");
    $entityName = ucfirst($entityName);

    print_r("\n");

    if (!file_exists("src/Entity/${entityName}.php"))
    {
        $tableName = readline("SQL Table Name ? \n");
        print_r("\n");
        $properties = array();
    } else {
        print_r("Your entity already exists, let's add some fields\n");
        $tableName = $entityName;
        $tmp = 'App\Entity\\'.$entityName;
        $entityToGet = new $tmp();
        $entity = new ReflectionClass($entityToGet);
        $propertiesInEntity = $entity->getProperties();
        foreach ($propertiesInEntity as $property)
        {
            if ($property->getName() !== "id")
            {
                $propertyEntityName = $property->getName();
                $propertyEntityType = $property->getType()->getName();
                $properties [] = array(
                    "name"=>$propertyEntityName,
                    "type"=>$propertyEntityType
                );
            }
        }
    }

    $properties = addProperty($properties);


    makeEntityFile($entityName,$tableName, $properties);
    print_r("\n");
    print_r("Your Entity was created at src/Entity/${entityName}.php");
    print_r("\n");
    print_r("\n");
}

if($argv[1]==="make:controller")
{
    print_r("\n");
    $controllerName = readline("Controller Name ?");
    $controllerFinalName = ucfirst($controllerName)."Controller.php";


    touch("src/Controller/${controllerFinalName}");
    mkdir("templates/".$controllerName);
    touch("templates/$controllerName/index.test.html");
    print_r("\n");
    print_r("Your controller was created as src/Controller/$controllerFinalName");
    print_r("\n");

    print_r("A new template created as templates/${controllerName}/index.test.html");
    print_r("\n");

}

function addProperty($properties)
{
    $propertyName = readline("What is the name of your property (press enter to stop) ? \n");
    if ($propertyName === "")
    {
        return $properties;
    }
    $propertyType = readline("What is the type of your property ? \n");
    if ($propertyType === "relation")
    {
        $entityRelated = readline("What class should this entity be related to ? \n");
        print_r("
 What type of relationship is this?
 ------------ ---------------------------------------------------------------- 
  Type         Description                                                     
 ------------ ---------------------------------------------------------------- 
  ManyToOne    Each Test relates to (has) one Bed.                             
               Each Bed can relate to (can have) many Test objects.            
                                                                               
  OneToMany    Each Test can relate to (can have) many Bed objects.            
               Each Bed relates to (has) one Test.                             
                                                                               
  ManyToMany   Each Test can relate to (can have) many Bed objects.            
               Each Bed can also relate to (can also have) many Test objects.  
                                                                               
  OneToOne     Each Test relates to (has) exactly one Bed.                     
               Each Bed also relates to (has) exactly one Test.                
 ------------ ----------------------------------------------------------------
        ");
        $relationType = readline("Relation type ? \n");
        $relationType = strtolower($relationType);
        $relationType = checkRelationType($relationType);
        // UTILISER LA REFLECTION POUR LES RELATIONS
    }
    $propertyType = checkType($propertyType);
    print_r("\n");
    $properties [] = array(
            "name"=>$propertyName,
            "type"=>$propertyType
    );
    return addProperty($properties);
}

function checkType($propertyType)
{
    $defaultPropertyTypes = ["int", "string", "array", "relation"];
    if (in_array($propertyType, $defaultPropertyTypes)){
        return $propertyType;
    }
    $newPropertyType = readline("Wrong type given try another one : ");
    return checkType($newPropertyType);
}
function checkRelationType($relationType)
{
    $defaultRelationTypes = ["manytomany", "manytoone", "onetomany", "onetoone"];
    if (in_array($relationType, $defaultRelationTypes))
    {
        return $relationType;
    }
    $newRelationType = readline("Wrong relation type given try another one : ");
    return checkRelationType($newRelationType);
}

function makeEntityFile($entityName, $tableName, $properties): void
{
    $returnedProperties = "";
    $methodsProperties = "";
    if ( !file_exists( "src/Entity" ) && !is_dir( "src/Entity" ) ) {
        mkdir( "src/Entity" );
    }
    if ($properties)
    {
        foreach ($properties as $property) {
            $propertyNameCap = ucfirst($property["name"]);
            $content1 =
                "
    #[Column(name: '${property["name"]}')]
    private ?${property["type"]} $${property["name"]} = null;          
            ";
            $returnedProperties = $returnedProperties.$content1;

            $content2 =
                "
    public function get${propertyNameCap}(): ?${property["type"]}
    {
        return \$this->${property["name"]};
    }
    
    public function set${propertyNameCap}(?${property["type"]} $${property["name"]}): static
    {
        \$this->${property["name"]} = $${property["name"]};
        
        return \$this;
    }
                ";
            $methodsProperties = $methodsProperties.$content2;
        }
    }





    $repoName = $entityName."Repository";

    $entityContent =
        "<?php

namespace App\Entity;

use App\Repository\\$repoName;
use Core\Attributes\Column;
use Core\Attributes\Table;
use Core\Attributes\TargetRepository;

#[Table(name:'$tableName')]
#[TargetRepository(name:$repoName::class)]
class $entityName
{
    #[Column(name: 'id')]
    private ?int \$id = null;
    $returnedProperties
    
    public function getId(): ?int
    {
        return \$this->id;
    }
    $methodsProperties
}";

    /*if (file_exists("src/Entity/${entityName}.php"))
    {
        function stringBetweenTwoStrings($str, $starting_word, $ending_word)
        {
            $subtring_start = strpos($str, $starting_word);
            $subtring_start += strlen($starting_word);
            $size = strpos($str, $ending_word, $subtring_start) - $subtring_start;
            return substr($str, $subtring_start, $size);
        }

        $fileContent = file_get_contents("src/Entity/${entityName}.php");
        $substring = stringBetweenTwoStrings($fileContent, 'id = null;', 'public function getId');
        $startContent = substr($fileContent, 0, strpos($fileContent, "id = null;"))."id = null;";
        $newFileContent = $startContent.$substring.$returnedProperties."\n\n";
        $endFileFirstStep = str_replace($startContent, "", $fileContent);
        $endFile = str_replace($substring, "", $endFileFirstStep);
        $newFileContent = $newFileContent.$endFile;
        $addMethods = str_replace(substr($newFileContent, -1),"", $newFileContent);
        $addMethods = $addMethods.$methodsProperties;
        $newFileContent = $newFileContent.$addMethods."}";
        file_put_contents("src/Entity/${entityName}.php", $newFileContent);
    }*/
    $entityFile = fopen("src/Entity/${entityName}.php", "w");
    fwrite($entityFile, $entityContent);
    fclose($entityFile);

    if ( !file_exists( "src/Repository" ) && !is_dir( "src/Repository" ) ) {
        mkdir( "src/Repository" );
    }

    $repoContent =
        "<?php 
\n
namespace App\Repository;
\n
use App\Entity\\$entityName;
\n
\n
class $repoName
{
\n
public function __construct(){}
}
        ";

    $repoFile = fopen("src/Repository/${repoName}.php", "w");
    fwrite($repoFile, $repoContent);
    fclose($repoFile);
}